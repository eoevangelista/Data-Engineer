{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "df-strider"
		},
		"AzureStride_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureStride'"
		},
		"stride_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'stride'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureStride')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureStride_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/stride')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('stride_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv_movies')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "stride",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "movies"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "duration_mins",
						"type": "String"
					},
					{
						"name": "original_language",
						"type": "String"
					},
					{
						"name": "size_mb",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/stride')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv_streams')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "stride",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "streams"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "movie_title",
						"type": "String"
					},
					{
						"name": "user_email",
						"type": "String"
					},
					{
						"name": "size_mb",
						"type": "String"
					},
					{
						"name": "start_at",
						"type": "String"
					},
					{
						"name": "end_at",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/stride')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv_users')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "stride",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "users"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "first_name",
						"type": "String"
					},
					{
						"name": "last_name",
						"type": "String"
					},
					{
						"name": "email",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/stride')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/jsn_authors')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "stride",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "authors"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"metadata": {
							"type": "object",
							"properties": {
								"name": {
									"type": "string"
								},
								"birth_date": {
									"type": "string"
								},
								"died_at": {
									"type": "string"
								}
							}
						},
						"nationalities": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"id": {
										"type": "null"
									},
									"label": {
										"type": "string"
									},
									"slug": {
										"type": "string"
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/stride')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/jsn_books')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "stride",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "books"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"name": {
							"type": "string"
						},
						"pages": {
							"type": "integer"
						},
						"author": {
							"type": "string"
						},
						"publisher": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/stride')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/jsn_reviews')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "stride",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "reviews"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"content": {
							"type": "object",
							"properties": {
								"text": {
									"type": "string"
								}
							}
						},
						"rating": {
							"type": "object",
							"properties": {
								"rate": {
									"type": "integer"
								},
								"label": {
									"type": "string"
								}
							}
						},
						"books": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"id": {
										"type": "null"
									},
									"metadata": {
										"type": "object",
										"properties": {
											"title": {
												"type": "string"
											},
											"pages": {
												"type": "string"
											}
										}
									}
								}
							}
						},
						"movies": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"id": {
										"type": "integer"
									},
									"title": {
										"type": "string"
									}
								}
							}
						},
						"updated": {
							"type": "string"
						},
						"created": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/stride')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_books')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureStride",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "name",
						"type": "varchar"
					},
					{
						"name": "pages",
						"type": "int",
						"precision": 10
					},
					{
						"name": "author",
						"type": "varchar"
					},
					{
						"name": "publisher",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Books"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureStride')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_movies')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureStride",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "title",
						"type": "varchar"
					},
					{
						"name": "duration_mins",
						"type": "int",
						"precision": 10
					},
					{
						"name": "original_language",
						"type": "varchar"
					},
					{
						"name": "size_mb",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Movies"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureStride')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_streams')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureStride",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "movie_title",
						"type": "varchar"
					},
					{
						"name": "user_email",
						"type": "varchar"
					},
					{
						"name": "size_mb",
						"type": "float",
						"precision": 15
					},
					{
						"name": "start_at",
						"type": "varchar"
					},
					{
						"name": "end_at",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Streams"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureStride')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_users')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureStride",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "first_name",
						"type": "varchar"
					},
					{
						"name": "last_name",
						"type": "varchar"
					},
					{
						"name": "email",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Users"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureStride')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_authors')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureStride",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "name",
						"type": "varchar"
					},
					{
						"name": "birth_date",
						"type": "varchar"
					},
					{
						"name": "died_at",
						"type": "varchar"
					},
					{
						"name": "label",
						"type": "varchar"
					},
					{
						"name": "slug",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Authors"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureStride')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_reviews')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureStride",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "pages",
						"type": "varchar"
					},
					{
						"name": "books_title",
						"type": "varchar"
					},
					{
						"name": "text",
						"type": "varchar"
					},
					{
						"name": "movie_title",
						"type": "varchar"
					},
					{
						"name": "rating",
						"type": "int",
						"precision": 10
					},
					{
						"name": "updated",
						"type": "varchar"
					},
					{
						"name": "created",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Reviews"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureStride')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_authors')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "jsn_authors",
								"type": "DatasetReference"
							},
							"name": "jsnauthors"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_authors",
								"type": "DatasetReference"
							},
							"name": "sinkauthors"
						}
					],
					"transformations": [
						{
							"name": "AlterRow"
						}
					],
					"scriptLines": [
						"source(output(",
						"          metadata as (birth_date as string, died_at as string, name as string),",
						"          nationalities as (id as string, label as string, slug as string)[]",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     enableCdc: true,",
						"     mode: 'read',",
						"     skipInitialLoad: false,",
						"     documentForm: 'documentPerLine') ~> jsnauthors",
						"jsnauthors alterRow(upsertIf(true()),",
						"     insertIf(true())) ~> AlterRow",
						"AlterRow sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          name as string,",
						"          birth_date as string,",
						"          died_at as string,",
						"          label as string,",
						"          slug as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['name'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          name = metadata.name,",
						"          birth_date = metadata.birth_date,",
						"          died_at = metadata.died_at,",
						"          label = nationalities[1].label,",
						"          slug = nationalities[1].slug",
						"     )) ~> sinkauthors"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/jsn_authors')]",
				"[concat(variables('factoryId'), '/datasets/sql_authors')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_books')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "jsn_books",
								"type": "DatasetReference"
							},
							"name": "jsnbooks"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_books",
								"type": "DatasetReference"
							},
							"name": "sinkbooks"
						}
					],
					"transformations": [
						{
							"name": "AlterRow"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          pages as integer,",
						"          author as string,",
						"          publisher as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     enableCdc: true,",
						"     mode: 'read',",
						"     skipInitialLoad: false,",
						"     documentForm: 'documentPerLine') ~> jsnbooks",
						"jsnbooks alterRow(upsertIf(true()),",
						"     insertIf(true())) ~> AlterRow",
						"AlterRow sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          name as string,",
						"          pages as integer,",
						"          author as string,",
						"          publisher as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['name'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          name,",
						"          pages,",
						"          author,",
						"          publisher",
						"     )) ~> sinkbooks"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/jsn_books')]",
				"[concat(variables('factoryId'), '/datasets/sql_books')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_movies')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "csv_movies",
								"type": "DatasetReference"
							},
							"name": "csvmovie"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_movies",
								"type": "DatasetReference"
							},
							"name": "sinkmovies"
						}
					],
					"transformations": [
						{
							"name": "AlterRow"
						}
					],
					"scriptLines": [
						"source(output(",
						"          title as string,",
						"          duration_mins as string,",
						"          original_language as string,",
						"          size_mb as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     enableCdc: true,",
						"     mode: 'read',",
						"     skipInitialLoad: true) ~> csvmovie",
						"csvmovie alterRow(upsertIf(true()),",
						"     insertIf(true())) ~> AlterRow",
						"AlterRow sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          title as string,",
						"          duration_mins as integer,",
						"          original_language as string,",
						"          size_mb as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['title'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          title,",
						"          duration_mins,",
						"          original_language,",
						"          size_mb",
						"     )) ~> sinkmovies"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/csv_movies')]",
				"[concat(variables('factoryId'), '/datasets/sql_movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_streams')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "csv_streams",
								"type": "DatasetReference"
							},
							"name": "csvstreams"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_streams",
								"type": "DatasetReference"
							},
							"name": "sinkstreams"
						}
					],
					"transformations": [
						{
							"name": "AlterRow"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movie_title as string,",
						"          user_email as string,",
						"          size_mb as double,",
						"          start_at as string,",
						"          end_at as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     enableCdc: true,",
						"     mode: 'read',",
						"     skipInitialLoad: false) ~> csvstreams",
						"csvstreams alterRow(upsertIf(true()),",
						"     insertIf(true())) ~> AlterRow",
						"AlterRow sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          movie_title as string,",
						"          user_email as string,",
						"          size_mb as double,",
						"          start_at as string,",
						"          end_at as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['movie_title','user_email','start_at'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          movie_title,",
						"          user_email,",
						"          size_mb,",
						"          start_at,",
						"          end_at",
						"     )) ~> sinkstreams"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/csv_streams')]",
				"[concat(variables('factoryId'), '/datasets/sql_streams')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_user')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "csv_users",
								"type": "DatasetReference"
							},
							"name": "csvuser"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_users",
								"type": "DatasetReference"
							},
							"name": "sinkuser"
						}
					],
					"transformations": [
						{
							"name": "AlterRow"
						}
					],
					"scriptLines": [
						"source(output(",
						"          first_name as string,",
						"          last_name as string,",
						"          email as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     enableCdc: true,",
						"     mode: 'read',",
						"     skipInitialLoad: false) ~> csvuser",
						"csvuser alterRow(upsertIf(true()),",
						"     insertIf(true())) ~> AlterRow",
						"AlterRow sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          first_name as string,",
						"          last_name as string,",
						"          email as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['email'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          first_name,",
						"          last_name,",
						"          email",
						"     )) ~> sinkuser"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/csv_users')]",
				"[concat(variables('factoryId'), '/datasets/sql_users')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_reviews')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "jsn_reviews",
								"type": "DatasetReference"
							},
							"name": "jsnreviews"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "sql_reviews",
								"type": "DatasetReference"
							},
							"name": "sinkreviews"
						}
					],
					"transformations": [
						{
							"name": "AlterRow"
						}
					],
					"scriptLines": [
						"source(output(",
						"          books as (id as string, metadata as (pages as string, title as string))[],",
						"          content as (text as string),",
						"          created as string,",
						"          movies as (id as boolean, title as string)[],",
						"          rating as (label as string, rate as short),",
						"          updated as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     enableCdc: true,",
						"     mode: 'read',",
						"     skipInitialLoad: false,",
						"     documentForm: 'documentPerLine') ~> jsnreviews",
						"jsnreviews alterRow(upsertIf(true()),",
						"     insertIf(true())) ~> AlterRow",
						"AlterRow sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          pages as string,",
						"          books_title as string,",
						"          text as string,",
						"          movie_title as string,",
						"          rating as integer,",
						"          updated as string,",
						"          created as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['text','books_title','movie_title','created'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          pages = books[1].metadata.pages,",
						"          books_title = books[1].metadata.title,",
						"          text = content.text,",
						"          movie_title = movies[1].title,",
						"          rating = rating.rate,",
						"          updated,",
						"          created",
						"     )) ~> sinkreviews"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/jsn_reviews')]",
				"[concat(variables('factoryId'), '/datasets/sql_reviews')]"
			]
		}
	]
}